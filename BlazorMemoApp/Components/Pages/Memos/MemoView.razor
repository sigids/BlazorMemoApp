@page "/memos/{Id:int}"
@rendermode InteractiveServer
@using BlazorMemoApp.Models
@using Microsoft.EntityFrameworkCore
@using BlazorMemoApp.Components.Memos
@inject BlazorMemoApp.Data.ApplicationDbContext Db
@inject NavigationManager Nav
@inject IJSRuntime JS

<h1>Memo @header?.MemoNo</h1>

@if (header is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card mb-3">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-sm-3"><label class="form-label">Memo No</label><div>@header.MemoNo</div></div>
                <div class="col-sm-3"><label class="form-label">Memo Date</label><div>@header.MemoDate.ToString("yyyy-MM-dd")</div></div>
                <div class="col-sm-3"><label class="form-label">PO Number</label><div>@header.PONumber</div></div>
                <div class="col-sm-3"><label class="form-label">GmtQty</label><div>@header.GmtQty</div></div>
            </div>
        </div>
    </div>

    <BlazorMemoApp.Components.Memos.MemoDetailGrid Items="header.Details" />

    <div class="mt-3 d-flex gap-2">
        <button class="btn btn-secondary" @onclick="Back">Back</button>
        <button class="btn btn-primary" @onclick="Save">Save</button>
        <button class="btn btn-outline-primary" @onclick="Print">Print / Save PDF</button>
        <button class="btn btn-danger" @onclick="Delete">Delete</button>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    private MemoHeaderModel? header;

    protected override async Task OnInitializedAsync()
    {
        header = await Db.Memos.Include(m => m.Details).FirstOrDefaultAsync(m => m.Id == Id);
    }

    private void Back() => Nav.NavigateTo("/memos");

    private async Task Save()
    {
        try
        {
            await Db.SaveChangesAsync();
            await JS.InvokeVoidAsync("alert", "Saved");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving memo: {ex.Message}");
        }
    }

    private async Task Print()
    {
        // Use browser print dialog; user can choose Save as PDF
        await JS.InvokeVoidAsync("window.print");
    }

    private async Task Delete()
    {
        if (header == null) return;
        var ok = await JS.InvokeAsync<bool>("confirm", $"Delete memo {header.MemoNo} and all details?");
        if (!ok) return;

        try
        {
            Db.Memos.Remove(header);
            await Db.SaveChangesAsync();
            Nav.NavigateTo("/memos");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting memo: {ex.Message}");
        }
    }
}
